# -*- coding: utf-8 -*-
"""nn_scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CPn4XVVO7UCxxJjBbmeguEuf9kKnWMTZ
"""

import numpy as np
from keras.datasets import mnist

def sigmoid(x):
    x = np.clip(x, -500, 500)  # Avoid overflow
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

def relu(x):
    return np.maximum(0, x)

def relu_derivative(x):
    return np.where(x > 0, 1, 0)

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.weights_input_hidden = np.random.randn(input_size, hidden_size) * 0.01
        self.weights_hidden_output = np.random.randn(hidden_size, output_size) * 0.01

    def forward(self, X):
        self.hidden = relu(np.dot(X, self.weights_input_hidden))
        self.output = sigmoid(np.dot(self.hidden, self.weights_hidden_output))
        return self.output

    def train(self, X, y, epochs=100, learning_rate=0.01):
        for _ in range(epochs):
            self.forward(X)

            error = y - self.output
            output_delta = error * sigmoid_derivative(self.output)

            hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
            hidden_delta = hidden_error * relu_derivative(self.hidden)

            self.weights_hidden_output += np.dot(self.hidden.T, output_delta) * learning_rate
            self.weights_input_hidden += np.dot(X.T, hidden_delta) * learning_rate

    def predict(self, X):
        return self.forward(X)

    def calculate_accuracy(self, X, y):
        predictions = self.predict(X)
        predicted_labels = np.argmax(predictions, axis=1)
        true_labels = np.argmax(y, axis=1)
        accuracy = np.mean(predicted_labels == true_labels)
        return accuracy

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape(x_train.shape[0], 784).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], 784).astype('float32') / 255

y_train = np.eye(10)[y_train]
y_test = np.eye(10)[y_test]

nn = NeuralNetwork(input_size=784, hidden_size=32, output_size=10)
nn.train(x_train, y_train, epochs=100, learning_rate=0.01)

accuracy = nn.calculate_accuracy(x_test, y_test)
print(f"Test accuracy: {accuracy * 100:.2f}%")